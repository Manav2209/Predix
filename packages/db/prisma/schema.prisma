// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  email     String      @unique
  username  String      @unique
  password  String
  balance   Decimal     @default(100) @db.Decimal(10, 2)
  // relations
  orders        Order[]
  positions     Position[]
  transactions  Transaction[]
  trades        Trade[]

  @@map("users")
}


enum OrderType {
  YES
  NO
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  PARTIAL
  FILLED
  CANCELED
  EXPIRED
}

model Order {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  eventId     String

  side        OrderSide    
  type        OrderType
  status      OrderStatus  @default(PENDING)
  price       Decimal      @db.Decimal(10, 2)
  volume      Decimal      @db.Decimal(10, 2)
  filledVolume Decimal     @default(0) @db.Decimal(10, 2)
  expiresAt   DateTime

  //relations
  User    User        @relation(fields: [userId], references: [id])
  Event   Event       @relation(fields: [eventId], references: [id])
  transactions  Transaction[]
  orderBookEntry OrderBookEntry?

  @@index([userId])
  @@index([eventId])
  @@index([status])
  @@map("orders")
}

model Event {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  title         String

  description   String
  question      String?
  resolvedAt    DateTime?    
  thumbnail     String?
  expiresAt     DateTime     
  
  yesPrice      Decimal      @default(0.5) @db.Decimal(10, 2) 
  noPrice       Decimal      @default(0.5) @db.Decimal(10, 2) 
  volume        Decimal      @default(0) @db.Decimal(10, 2)  
  isActive      Boolean      @default(true)

  // relations
  positions     Position[]
  orders        Order[]
  orderBook     OrderBookEntry[]
  trades        Trade[]
  @@index([isActive])
  @@map("events")
}

// User's position in an event
model Position {
  id         String   @id @default(cuid())
  userId     String
  eventId    String
  outcome    Outcome 
  shares     Decimal  @default(0) @db.Decimal(10, 2)
  avgPrice   Decimal  @default(0) @db.Decimal(10, 4)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId, outcome])
  @@map("positions")
}

enum Outcome {
  YES
  NO
}

model Trade {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  quantity      Decimal     @db.Decimal(10, 2)
  price         Decimal     @db.Decimal(10, 2)
  outcome       Outcome
  userId        String
  eventId       String?
  // Relations
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  event         Event?       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@map("trades")
}



// Order book for each event
model OrderBookEntry {
  id        String     @id @default(cuid())
  eventId   String
  orderId   String?    @unique
  outcome   Outcome    // YES or NO shares
  side      OrderSide  // BUY or SELL
  price     Decimal    @db.Decimal(10, 2)
  volume    Decimal    @db.Decimal(10, 2)
  timestamp DateTime   @default(now())

  // Relations
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  order     Order?     @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([eventId, price])
  @@index([outcome, side])
  @@map("order_book_entries")
}

// Transaction model for executed trades
model Transaction {
  id            String    @id @default(cuid())
  orderId       String
  userId        String
  createdAt     DateTime  @default(now())
  executedAt    DateTime  @default(now())
  volume        Decimal   @db.Decimal(10, 2)
  price         Decimal   @db.Decimal(10, 2)
  totalAmount   Decimal   @db.Decimal(10, 2)
  outcome       Outcome   // YES or NO shares

  // Relations
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([userId])
  @@map("transactions")
}
